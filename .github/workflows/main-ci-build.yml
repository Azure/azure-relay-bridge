name: Main and Release CI Build

on:
  workflow_dispatch:
  push:
    branches: [ master, main ]
  create:
    tags:
      - 'v*.*'
  pull_request:
    branches: [ master, main ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: Vampire/setup-wsl@v1
      with:
        distribution: Ubuntu-20.04
        
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # Mandatory to use the extract version from tag action

    - name: Extract version from tag
      uses: damienaicheh/extract-version-from-tag-action@v1.0.0
      
    - name: Export version  
      run: |
         echo "VERSIONSUFFIX=${{ env.PRE_RELEASE }}" >> $GITHUB_ENV
         echo "PRODVERSION=${{ env.MAJOR }}.${{ env.MINOR }}" >> $GITHUB_ENV
         echo "PATCHVERSION=${{ env.PATCH }}" >> $GITHUB_ENV
      
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    
    - name: Restore dependencies
      run: dotnet restore

    - name: Build for Windows 10-x64
      run: dotnet msbuild /t:Package /p:WindowsOnly=true /p:RuntimeIdentifier=win10-x64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Windows 10-arm64
      run: dotnet msbuild /t:Restore,Package /p:WindowsOnly=false /p:RuntimeIdentifier=win10-arm /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Windows 10-x86
      run: dotnet msbuild /t:Restore,Package /p:WindowsOnly=false /p:RuntimeIdentifier=win10-x86 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for macOS-x64
      run: dotnet msbuild /t:Package /p:WindowsOnly=false /p:RuntimeIdentifier=osx-x64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Ubuntu 18-x64
      run: dotnet msbuild /t:Package /p:WindowsOnly=false /p:RuntimeIdentifier=ubuntu.18.04-x64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Ubuntu 18-arm64
      run: dotnet msbuild /t:Restore,Package /p:WindowsOnly=false /p:RuntimeIdentifier=ubuntu.18.04-arm64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Ubuntu 20-x64
      run: dotnet msbuild /t:Package /p:WindowsOnly=false /p:RuntimeIdentifier=ubuntu.20.04-x64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Ubuntu 20-arm64
      run: dotnet msbuild /t:Restore,Package /p:WindowsOnly=false /p:RuntimeIdentifier=ubuntu.20.04-arm64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Debian 10-x64
      run: dotnet msbuild /t:Package /p:WindowsOnly=false /p:RuntimeIdentifier=debian.10-x64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for OpenSUSE 15-x64
      run: dotnet msbuild /t:Restore,Package /p:WindowsOnly=false /p:RuntimeIdentifier=opensuse.15.0-x64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    - name: Build for Fedora 30-x64
      run: dotnet msbuild /t:Restore,Package /p:WindowsOnly=false /p:RuntimeIdentifier=fedora.34-x64 /p:Configuration=Release /p:TargetFramework=net6.0 /p:VersionSuffix=rel
    
    - name: Test
      run: dotnet test /p:TargetFramework=net6.0 /p:RuntimeIdentifier=win10-x64 /p:Configuration=Debug

    - uses: actions/upload-artifact@v2
      with:
        name: XBuild
        path: artifacts/build/net6.0

    - name: Integration Tests Docker/Linux
      env:
         AZBRIDGE_TEST_CXNSTRING: ${{ secrets.AZBRIDGE_TEST_CXNSTRING }}
      run: wsl-bash ./verify-build.sh
      
    # create a release if a tag has been pushed
    - name: Generate Release
      uses: ncipollo/release-action@v1
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        artifacts: "artifacts/build/net6.0/*"
        generateReleaseNotes: true
        allowUpdates: true
    
